true
let x = true in x
if false then true else false
0
succ (succ (succ 0))
3
succ (pred 0)
iszero (pred (succ (succ 0)))
if iszero 3 then 0 else 1
iszero true
if 1 then true else false
if iszero 3 then 0 else false
let id = Lx.x in id 3
let id_bool = L x:Bool. x in id_bool true
let id_nat = L x:Nat. x in id_nat 5
let x = 5 in let id_nat = L x:Nat. x in id_nat x
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in sum 21 34
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in let prodaux = lambda f. (lambda n. (lambda m. if (iszero m) then 0 else sum n (f n (pred m)))) in let prod = fix prodaux in prod 12 5


let id_list = L x:List[Nat]. x in id_list cons[Nat] 3 nil[Nat];;

letrec sum : Nat -> Nat -> Nat = 
    lambda n: Nat. lambda m: Nat. if iszero n then m else succ (sum (pred n) m)
    in letrec length: List[Nat] -> Nat = 
        lambda l : List[Nat]. if isnil[Nat] l then 0 else sum 1 (length (tail[Nat] l))
        in length cons[Nat] 6 (cons[Nat] 8 (cons[Nat] 7 nil[Nat]));;

letrec recorrer: List[Nat] -> List[Nat] = 
    lambda l: List[Nat]. if isnil[Nat] l then nil[Nat] else recorrer (tail[Nat] l)
    in recorrer cons[Nat] 3 nil[Nat];;